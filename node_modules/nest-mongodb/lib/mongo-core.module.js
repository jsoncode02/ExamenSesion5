"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var MongoCoreModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoCoreModule = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const mongodb_1 = require("mongodb");
const mongo_constants_1 = require("./mongo.constants");
const mongo_util_1 = require("./mongo.util");
let MongoCoreModule = MongoCoreModule_1 = class MongoCoreModule {
    constructor(connectionName, moduleRef) {
        this.connectionName = connectionName;
        this.moduleRef = moduleRef;
    }
    static forRoot(uri, dbName, clientOptions, connectionName) {
        const connectionNameProvider = {
            provide: mongo_constants_1.MONGO_CONNECTION_NAME,
            useValue: connectionName !== null && connectionName !== void 0 ? connectionName : mongo_constants_1.DEFAULT_MONGO_CONNECTION_NAME
        };
        const clientProvider = {
            provide: mongo_util_1.getClientToken(connectionName),
            useFactory: () => __awaiter(this, void 0, void 0, function* () {
                const client = new mongodb_1.MongoClient(uri, clientOptions);
                return yield client.connect();
            })
        };
        const dbProvider = {
            provide: mongo_util_1.getDbToken(connectionName),
            useFactory: (client) => client.db(dbName),
            inject: [mongo_util_1.getClientToken(connectionName)]
        };
        return {
            module: MongoCoreModule_1,
            providers: [connectionNameProvider, clientProvider, dbProvider],
            exports: [clientProvider, dbProvider]
        };
    }
    static forRootAsync(options) {
        var _a;
        const mongoConnectionName = (_a = options.connectionName) !== null && _a !== void 0 ? _a : mongo_constants_1.DEFAULT_MONGO_CONNECTION_NAME;
        const connectionNameProvider = {
            provide: mongo_constants_1.MONGO_CONNECTION_NAME,
            useValue: mongoConnectionName
        };
        const clientProvider = {
            provide: mongo_util_1.getClientToken(mongoConnectionName),
            useFactory: (mongoModuleOptions) => __awaiter(this, void 0, void 0, function* () {
                const { uri, clientOptions } = mongoModuleOptions;
                const client = new mongodb_1.MongoClient(uri, clientOptions);
                return yield client.connect();
            }),
            inject: [mongo_constants_1.MONGO_MODULE_OPTIONS]
        };
        const dbProvider = {
            provide: mongo_util_1.getDbToken(mongoConnectionName),
            useFactory: (mongoModuleOptions, client) => client.db(mongoModuleOptions.dbName),
            inject: [mongo_constants_1.MONGO_MODULE_OPTIONS, mongo_util_1.getClientToken(mongoConnectionName)]
        };
        const asyncProviders = this.createAsyncProviders(options);
        return {
            module: MongoCoreModule_1,
            imports: options.imports,
            providers: [...asyncProviders, clientProvider, dbProvider, connectionNameProvider],
            exports: [clientProvider, dbProvider]
        };
    }
    onModuleDestroy() {
        return __awaiter(this, void 0, void 0, function* () {
            const client = this.moduleRef.get(mongo_util_1.getClientToken(this.connectionName));
            if (client)
                yield client.close();
        });
    }
    static createAsyncProviders(options) {
        if (options.useExisting || options.useFactory) {
            return [this.createAsyncOptionsProvider(options)];
        }
        else if (options.useClass) {
            return [
                this.createAsyncOptionsProvider(options),
                {
                    provide: options.useClass,
                    useClass: options.useClass
                }
            ];
        }
        else {
            return [];
        }
    }
    static createAsyncOptionsProvider(options) {
        var _a;
        if (options.useFactory) {
            return {
                provide: mongo_constants_1.MONGO_MODULE_OPTIONS,
                useFactory: options.useFactory,
                inject: (_a = options.inject) !== null && _a !== void 0 ? _a : []
            };
        }
        else if (options.useExisting) {
            return {
                provide: mongo_constants_1.MONGO_MODULE_OPTIONS,
                useFactory: (optionsFactory) => __awaiter(this, void 0, void 0, function* () { return yield optionsFactory.createMongoOptions(); }),
                inject: [options.useExisting]
            };
        }
        else if (options.useClass) {
            return {
                provide: mongo_constants_1.MONGO_MODULE_OPTIONS,
                useFactory: (optionsFactory) => __awaiter(this, void 0, void 0, function* () { return yield optionsFactory.createMongoOptions(); }),
                inject: [options.useClass]
            };
        }
        else {
            throw new Error('Invalid MongoModule options');
        }
    }
};
MongoCoreModule = MongoCoreModule_1 = __decorate([
    common_1.Global(),
    common_1.Module({}),
    __param(0, common_1.Inject(mongo_constants_1.MONGO_CONNECTION_NAME)),
    __metadata("design:paramtypes", [String, core_1.ModuleRef])
], MongoCoreModule);
exports.MongoCoreModule = MongoCoreModule;
