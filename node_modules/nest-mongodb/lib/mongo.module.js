"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MongoModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoModule = void 0;
const common_1 = require("@nestjs/common");
const mongo_providers_1 = require("./mongo.providers");
const mongo_core_module_1 = require("./mongo-core.module");
/**
 * Module for the MongoDB driver
 */
let MongoModule = MongoModule_1 = class MongoModule {
    /**
     * Inject the MongoDB driver synchronously.
     * @param uri The database URI
     * @param dbName The database name
     * @param options Options for the MongoClient that will be created
     * @param connectionName A unique name for the connection.  If not specified, a default name
     * will be used.
     */
    static forRoot(uri, dbName, options, connectionName) {
        return {
            module: MongoModule_1,
            imports: [mongo_core_module_1.MongoCoreModule.forRoot(uri, dbName, options, connectionName)]
        };
    }
    /**
     * Inject the MongoDB driver asynchronously, allowing any dependencies such as a configuration
     * service to be injected first.
     * @param options Options for asynchrous injection
     */
    static forRootAsync(options) {
        return {
            module: MongoModule_1,
            imports: [mongo_core_module_1.MongoCoreModule.forRootAsync(options)]
        };
    }
    /**
     * Inject collections.
     * @param collections An array of the names of the collections to be injected.
     * @param connectionName A unique name for the connection. If not specified, a default name
     * will be used.
     */
    static forFeature(collections = [], connectionName) {
        const providers = mongo_providers_1.createMongoProviders(connectionName, collections);
        return {
            module: MongoModule_1,
            providers: providers,
            exports: providers
        };
    }
};
MongoModule = MongoModule_1 = __decorate([
    common_1.Module({})
], MongoModule);
exports.MongoModule = MongoModule;
